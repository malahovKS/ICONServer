/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ControlGraphicShell.java
 *
 * Created on Feb 3, 2011, 11:53:40 AM
 */
package o_s;

import java.awt.BorderLayout;
import java.io.*;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.print.attribute.AttributeSet;
import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.rtf.RTFEditorKit;

/**
 *
 * @author kirilmalahov
 */
public class ControlGraphicShell extends javax.swing.JFrame {

    SemanticMapping SemanticMappingWindow;
    GraphEditor GraphEditorWindow;
    ArchiveSearch ArchiveSearchWindow;
    GoogleBingSearchModule GoogleSearchModuleWindow;
    GraphEditorNew GEN;

    /** Creates new form ControlGraphicShell */
    public ControlGraphicShell() {
        initComponents();
        this.setSize(900, 600);
        this.setLocationRelativeTo(getRootPane());


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        SyntacticSemanticAnalysis = new javax.swing.JButton();
        VisualEditing = new javax.swing.JButton();
        ConvertOWLToXML = new javax.swing.JButton();
        ProtegeLaunch = new javax.swing.JButton();
        OntologyIntegration = new javax.swing.JButton();
        ArchiveOfTerms = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        GoogleInteraction = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewProjectMenuItem = new javax.swing.JMenuItem();
        OpenProjectMenuItem = new javax.swing.JMenuItem();
        SaveProjectMenuItem = new javax.swing.JMenuItem();
        SaveProjectASMenuItem = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        DemoModeMenuItem = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        VisualEditingMenuItem = new javax.swing.JMenuItem();
        ConvertOWLToXMLMenuItem = new javax.swing.JMenuItem();
        SyntacticSemanticAnalysisMenuItem = new javax.swing.JMenuItem();
        ArchiveOfTermsMenuItem = new javax.swing.JMenuItem();
        OntologyIntegrationMenuItem = new javax.swing.JMenuItem();
        ProtegeLaunchMenuItem = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        GoogleInteractionMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        ExitMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        PluginsMenuItem = new javax.swing.JMenuItem();
        LibraryMenu = new javax.swing.JMenu();
        ArchiveMenuItem = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        HelpBookMenuItem = new javax.swing.JMenuItem();
        ReleaseNotesMenuItem = new javax.swing.JMenuItem();
        AboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Инструментальный комплекс онтологического назначения (Режим эксперта)");
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.TOOLKIT_EXCLUDE);
        setResizable(false);

        jPanel1.setLayout(new java.awt.GridLayout(3, 3));

        SyntacticSemanticAnalysis.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        SyntacticSemanticAnalysis.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/Documents-128.png"))); // NOI18N
        SyntacticSemanticAnalysis.setText("Лингвистический анализ ТД");
        SyntacticSemanticAnalysis.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        SyntacticSemanticAnalysis.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SyntacticSemanticAnalysis.setPreferredSize(new java.awt.Dimension(267, 157));
        SyntacticSemanticAnalysis.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SyntacticSemanticAnalysis.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SyntacticSemanticAnalysisActionPerformed(evt);
            }
        });
        jPanel1.add(SyntacticSemanticAnalysis);

        VisualEditing.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        VisualEditing.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/Binary-tree-128.png"))); // NOI18N
        VisualEditing.setText("Модуль визуального проектирования");
        VisualEditing.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        VisualEditing.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VisualEditing.setPreferredSize(new java.awt.Dimension(267, 157));
        VisualEditing.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        VisualEditing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualEditingActionPerformed(evt);
            }
        });
        jPanel1.add(VisualEditing);

        ConvertOWLToXML.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ConvertOWLToXML.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/convert_128.png"))); // NOI18N
        ConvertOWLToXML.setText("Модуль конвертирования OWL");
        ConvertOWLToXML.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ConvertOWLToXML.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ConvertOWLToXML.setPreferredSize(new java.awt.Dimension(267, 157));
        ConvertOWLToXML.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ConvertOWLToXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertOWLToXMLActionPerformed(evt);
            }
        });
        jPanel1.add(ConvertOWLToXML);

        ProtegeLaunch.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        ProtegeLaunch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/protege_logo.jpg"))); // NOI18N
        ProtegeLaunch.setText("Редактор Protege");
        ProtegeLaunch.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ProtegeLaunch.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ProtegeLaunch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ProtegeLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProtegeLaunchActionPerformed(evt);
            }
        });
        jPanel1.add(ProtegeLaunch);

        OntologyIntegration.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        OntologyIntegration.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/Integration.png"))); // NOI18N
        OntologyIntegration.setText("Модуль системной интеграции онтологий");
        OntologyIntegration.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        OntologyIntegration.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OntologyIntegration.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OntologyIntegration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OntologyIntegrationActionPerformed(evt);
            }
        });
        jPanel1.add(OntologyIntegration);

        ArchiveOfTerms.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        ArchiveOfTerms.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/DB.png"))); // NOI18N
        ArchiveOfTerms.setText("Модуль индексации и поиска ТИ");
        ArchiveOfTerms.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ArchiveOfTerms.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ArchiveOfTerms.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ArchiveOfTerms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchiveOfTermsActionPerformed(evt);
            }
        });
        jPanel1.add(ArchiveOfTerms);

        jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);

        GoogleInteraction.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        GoogleInteraction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/o_s/images/google.png"))); // NOI18N
        GoogleInteraction.setText("Поисковая система");
        GoogleInteraction.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        GoogleInteraction.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GoogleInteraction.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        GoogleInteraction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoogleInteractionActionPerformed(evt);
            }
        });
        jPanel1.add(GoogleInteraction);

        jButton3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        FileMenu.setText("Файл");
        FileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProtegeLaunchActionPerformed(evt);
            }
        });

        NewProjectMenuItem.setText("Новый проект ...");
        NewProjectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewProjectMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(NewProjectMenuItem);

        OpenProjectMenuItem.setText("Открыть проект");
        FileMenu.add(OpenProjectMenuItem);

        SaveProjectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveProjectMenuItem.setText("Сохранить проект");
        FileMenu.add(SaveProjectMenuItem);

        SaveProjectASMenuItem.setText("Сохранить проект как ...");
        FileMenu.add(SaveProjectASMenuItem);

        jMenuItem5.setText("Главное меню управления");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        FileMenu.add(jMenuItem5);

        DemoModeMenuItem.setText("Демонстрационный режим");
        FileMenu.add(DemoModeMenuItem);

        jCheckBoxMenuItem1.setText("Режим работы \"Клиент-Сервер\"");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        FileMenu.add(jCheckBoxMenuItem1);
        FileMenu.add(jSeparator1);

        VisualEditingMenuItem.setText("Модуль визуального проектирования");
        VisualEditingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VisualEditingMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(VisualEditingMenuItem);

        ConvertOWLToXMLMenuItem.setText("Модуль конвертирования OWL у XML");
        ConvertOWLToXMLMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertOWLToXMLMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ConvertOWLToXMLMenuItem);

        SyntacticSemanticAnalysisMenuItem.setText("Лингвистический анализ ТД");
        SyntacticSemanticAnalysisMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SyntacticSemanticAnalysisMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(SyntacticSemanticAnalysisMenuItem);

        ArchiveOfTermsMenuItem.setText("Архив терминов");
        ArchiveOfTermsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ArchiveOfTermsMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ArchiveOfTermsMenuItem);

        OntologyIntegrationMenuItem.setText("Модуль интеграции онтологий");
        FileMenu.add(OntologyIntegrationMenuItem);

        ProtegeLaunchMenuItem.setText("Редактор Protege");
        ProtegeLaunchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProtegeLaunchActionPerformed(evt);
            }
        });
        FileMenu.add(ProtegeLaunchMenuItem);

        jMenuItem4.setText("Модуль управления библиотеками");
        FileMenu.add(jMenuItem4);

        GoogleInteractionMenuItem.setText("Модуль взаимодействия с Internet");
        GoogleInteractionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoogleInteractionMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(GoogleInteractionMenuItem);
        FileMenu.add(jSeparator2);

        ExitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        ExitMenuItem.setText("Выход");
        ExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(ExitMenuItem);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Редактировать");

        PluginsMenuItem.setText("Дополнения");
        EditMenu.add(PluginsMenuItem);

        jMenuBar1.add(EditMenu);

        LibraryMenu.setText("Библиотека");

        ArchiveMenuItem.setText("Архив терминов");
        LibraryMenu.add(ArchiveMenuItem);

        jMenuItem1.setText("Онтологии ПдО");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        LibraryMenu.add(jMenuItem1);

        jMenuItem2.setText("ЛКТ");
        LibraryMenu.add(jMenuItem2);

        jMenuItem3.setText("Оригинальные ТД");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        LibraryMenu.add(jMenuItem3);

        jMenuBar1.add(LibraryMenu);

        HelpMenu.setText("Помощь");

        HelpBookMenuItem.setText("Справка");
        HelpBookMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpBookMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(HelpBookMenuItem);

        ReleaseNotesMenuItem.setText("Release notes");
        ReleaseNotesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReleaseNotesMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(ReleaseNotesMenuItem);

        AboutMenuItem.setText("О программе");
        HelpMenu.add(AboutMenuItem);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 2097, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SyntacticSemanticAnalysisMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SyntacticSemanticAnalysisMenuItemActionPerformed
        // TODO add your handling code here:
        SemanticMappingWindow = new SemanticMapping();
        // SemanticMappingWindow.setSize(1000, 600);
        SemanticMappingWindow.setVisible(true);
    }//GEN-LAST:event_SyntacticSemanticAnalysisMenuItemActionPerformed

    private void ExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitMenuItemActionPerformed
        // TODO add your handling code here:
        //полное закрытие приложения
        //System.exit(0);
        
        
        
        this.dispose();
    }//GEN-LAST:event_ExitMenuItemActionPerformed

    private void VisualEditingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualEditingMenuItemActionPerformed
        // TODO add your handling code here:
        String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);

        if (OSver.startsWith("Win")) {
            GraphEditorWindow = new GraphEditor();
            GraphEditorWindow.run();
        }

        if (OSver.startsWith("Mac")) {
            System.out.println("VM must be run with this    -d32 -XstartOnFirstThread");
            Runtime r1 = Runtime.getRuntime();
            Process p1 = null;
            try {
                p1 = r1.exec("java -jar -d32 -XstartOnFirstThread /Users/MalahovKS/NetBeansProjects/SWT_MAC_GraphEditor/dist/SWT_MAC_GraphEditor.jar");
            } catch (IOException ex) {
                Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                p1.waitFor();
            } catch (InterruptedException ex) {
                Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_VisualEditingMenuItemActionPerformed

    private void ConvertOWLToXMLMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertOWLToXMLMenuItemActionPerformed
        // TODO add your handling code here:

        String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);

        if (OSver.startsWith("Win")) {

            OWL_to_XML_WIN OtoX = new OWL_to_XML_WIN();
        } else {
            if (OSver.startsWith("Mac")) {
                OWL_to_XML_MAC OtoX = new OWL_to_XML_MAC();
                System.out.println("VM must be run with this    -d32 -XstartOnFirstThread");
            }

        }
    }//GEN-LAST:event_ConvertOWLToXMLMenuItemActionPerformed

    private void SyntacticSemanticAnalysisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SyntacticSemanticAnalysisActionPerformed
        // TODO add your handling code here:
        SemanticMappingWindow = new SemanticMapping();
        //SemanticMappingWindow.setSize(1000, 650);
        SemanticMappingWindow.setVisible(true);
    }//GEN-LAST:event_SyntacticSemanticAnalysisActionPerformed

    private void ConvertOWLToXMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertOWLToXMLActionPerformed
        // TODO add your handling code here:
        String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);

        if (OSver.startsWith("Win")) {

            OWL_to_XML_WIN OtoX = new OWL_to_XML_WIN();
        } else {
            if (OSver.startsWith("Mac")) {
                OWL_to_XML_MAC OtoX = new OWL_to_XML_MAC();
                // OWL_to_XML_WIN OtoX = new OWL_to_XML_WIN();
                System.out.println("VM must be run with this    -d32 -XstartOnFirstThread");
            }

        }


    }//GEN-LAST:event_ConvertOWLToXMLActionPerformed

    private void VisualEditingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VisualEditingActionPerformed

        String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);

        if (OSver.startsWith("Win")) {
            //GraphEditorWindow = new GraphEditor();
            //GraphEditorWindow.run();
            //GEN = new GraphEditorNew();
            GraphEditorNew.main();
            
        } else {
            if (OSver.startsWith("Mac")) {


                System.out.println("VM must be run with this    -d32 -XstartOnFirstThread");
                Runtime r1 = Runtime.getRuntime();
                Process p1 = null;
                try {
                    p1 = r1.exec("java -jar -d32 -XstartOnFirstThread /Users/MalahovKS/NetBeansProjects/SWT_MAC_GraphEditor/dist/SWT_MAC_GraphEditor.jar");
                } catch (IOException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    p1.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }


            }

        }
    }//GEN-LAST:event_VisualEditingActionPerformed

    private void ReleaseNotesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReleaseNotesMenuItemActionPerformed
        // TODO add your handling code here:
        JFrame changeLog = new JFrame();
        changeLog.setSize(500, 240);
        changeLog.setAlwaysOnTop(true);
        changeLog.setLocationRelativeTo(getRootPane());
        changeLog.setTitle("Change Log");


        changeLog.getContentPane().setLayout(new BorderLayout());

        JPanel topPanel = new JPanel();
        topPanel.setLayout(new BorderLayout());
        changeLog.getContentPane().add(topPanel, BorderLayout.CENTER);

        //Create an RTF editor window
        RTFEditorKit rtf = new RTFEditorKit();
        JEditorPane editor = new JEditorPane();
        editor.setEditorKit(rtf);
        changeLog.setVisible(true);
        editor.setDocument(new DefaultStyledDocument() {

            public void insertString(int offs, String str, AttributeSet a) throws BadLocationException, UnsupportedEncodingException {
                try {
                    str = new String(str.getBytes("ISO-8859-1"), "cp1251");
                } catch (UnsupportedEncodingException e) {
                    e.printStackTrace();
                }
                super.insertString(offs, str, (javax.swing.text.AttributeSet) a);
            }
        });

        //This text could be big so add a scroll pane
        JScrollPane scroller = new JScrollPane();
        scroller.getViewport().add(editor);
        topPanel.add(scroller, BorderLayout.CENTER);

        //setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        //Load an RTF file into the editor
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(new BufferedInputStream(new FileInputStream("report.rtf")), "cp1251"));
            rtf.read(reader, editor.getDocument(), 0);
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        changeLog.setVisible(true);

    }//GEN-LAST:event_ReleaseNotesMenuItemActionPerformed

    private void ProtegeLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProtegeLaunchActionPerformed

          String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);

        if (OSver.startsWith("Win")) {
           System.out.println("You need to define path to the Protege!!!");

           PathToProtegeAskFrame PTPAF = new PathToProtegeAskFrame();
           PTPAF.setVisible(true);
        }

        if (OSver.startsWith("Mac")) {
            System.out.println("VM must be run with this    -d32 -XstartOnFirstThread");
            Runtime r1 = Runtime.getRuntime();
            Process p1 = null;
            try {
                p1 = r1.exec("open /Applications/Protege-4.1.app");
            } catch (IOException ex) {
                Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
            }


        }

    }//GEN-LAST:event_ProtegeLaunchActionPerformed

    private void ArchiveOfTermsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchiveOfTermsActionPerformed

        ArchiveSearchWindow = new ArchiveSearch();
        ArchiveSearchWindow.run();

    }//GEN-LAST:event_ArchiveOfTermsActionPerformed



    private void GoogleInteractionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoogleInteractionActionPerformed
        // TODO add your handling code here:
        GoogleSearchModuleWindow = new GoogleBingSearchModule();
        GoogleSearchModuleWindow.run();
    }//GEN-LAST:event_GoogleInteractionActionPerformed

    private void ArchiveOfTermsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ArchiveOfTermsMenuItemActionPerformed
        ArchiveSearchWindow = new ArchiveSearch();
        ArchiveSearchWindow.run();
    }//GEN-LAST:event_ArchiveOfTermsMenuItemActionPerformed

    private void GoogleInteractionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoogleInteractionMenuItemActionPerformed
        GoogleSearchModuleWindow = new GoogleBingSearchModule();
        GoogleSearchModuleWindow.run();
    }//GEN-LAST:event_GoogleInteractionMenuItemActionPerformed

    private void OntologyIntegrationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OntologyIntegrationActionPerformed
        // TODO add your handling code here:



        String OSver = System.getProperty("os.name");
        System.out.println("OS Version -->" + OSver);
        
        
        
        Class<Main_CGS> mainClass = Main_CGS.class;
        String a = null;
        try {
            a = getPath(mainClass).toString();
        } catch (Exception ex) {
            Logger.getLogger(Main_CGS.class.getName()).log(Level.SEVERE, null, ex);
        }

        if (OSver.startsWith("Win")) {
            System.out.println(a + "\\Onin\\onin.jar");

                 Runtime r1 = Runtime.getRuntime();
                Process p1 = null;
                try {
                    p1 = r1.exec("java -jar "+ a + "/Onin/onin.jar");
                } catch (IOException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    p1.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }

        } else {
            if (OSver.startsWith("Mac")) {



                Runtime r1 = Runtime.getRuntime();
                Process p1 = null;
                try {
                    p1 = r1.exec("java -jar /Users/MalahovKS/NetBeansProjects/InCom/Onin/onin.jar");
                } catch (IOException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    p1.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }


            }

        }

    }//GEN-LAST:event_OntologyIntegrationActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    private void HelpBookMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpBookMenuItemActionPerformed
        // TODO add your handling code here:
        
        Runtime r1 = Runtime.getRuntime();
                Process p1 = null;
                try {
                    p1 = r1.exec("open ІКОП_настанова_користувача.doc");
                } catch (IOException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    p1.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(GoogleBingSearchModule.class.getName()).log(Level.SEVERE, null, ex);
                }
    }//GEN-LAST:event_HelpBookMenuItemActionPerformed

    private void NewProjectMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewProjectMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NewProjectMenuItemActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
   // public static void main(String args[]) {
      

      //  java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
        try {
            //                    задаём приложению Look and Feel системы которой оно запущено
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ControlGraphicShell.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(ControlGraphicShell.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(ControlGraphicShell.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ControlGraphicShell.class.getName()).log(Level.SEVERE, null, ex);
        }
             


                new ControlGraphicShell().setVisible(true);
            }
            
            
            
            public static File getPath(Class clazz) throws Exception
  {
    String classFileName = '/'+ clazz.getName().replace('.', '/') + ".class";
    URL clazzUrl = clazz.getResource(classFileName);
    if(clazzUrl.getProtocol().equals("jar")) {
      String file = clazzUrl.getFile();
      int index = file.indexOf('!');
      if(index > 0)
      {
        file = file.substring(0, index);
      }
file = file.substring(0, file.indexOf("InCom.jar"));
      clazzUrl = new URL(file);
    }
    return new File(clazzUrl.toURI()).getCanonicalFile();
  }
            
      //  });
   // }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JMenuItem ArchiveMenuItem;
    private javax.swing.JButton ArchiveOfTerms;
    private javax.swing.JMenuItem ArchiveOfTermsMenuItem;
    private javax.swing.JButton ConvertOWLToXML;
    private javax.swing.JMenuItem ConvertOWLToXMLMenuItem;
    private javax.swing.JCheckBoxMenuItem DemoModeMenuItem;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitMenuItem;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JButton GoogleInteraction;
    private javax.swing.JMenuItem GoogleInteractionMenuItem;
    private javax.swing.JMenuItem HelpBookMenuItem;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenu LibraryMenu;
    private javax.swing.JMenuItem NewProjectMenuItem;
    private javax.swing.JButton OntologyIntegration;
    private javax.swing.JMenuItem OntologyIntegrationMenuItem;
    private javax.swing.JMenuItem OpenProjectMenuItem;
    private javax.swing.JMenuItem PluginsMenuItem;
    private javax.swing.JButton ProtegeLaunch;
    private javax.swing.JMenuItem ProtegeLaunchMenuItem;
    private javax.swing.JMenuItem ReleaseNotesMenuItem;
    private javax.swing.JMenuItem SaveProjectASMenuItem;
    private javax.swing.JMenuItem SaveProjectMenuItem;
    private javax.swing.JButton SyntacticSemanticAnalysis;
    private javax.swing.JMenuItem SyntacticSemanticAnalysisMenuItem;
    private javax.swing.JButton VisualEditing;
    private javax.swing.JMenuItem VisualEditingMenuItem;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
